{"version":3,"sources":["RealTimeChart.js","App.js","serviceWorker.js","index.js"],"names":["datasets","Object","objectSpread","label","color","fill","cubicInterpolationMode","backgroundColor","borderColor","data","RealTimeChart","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","client","emitter","host","port","secure","subscribe","key","channel","sensor1","_this2","on","msg","push","parseInt","asString","console","log","_this3","react_default","a","createElement","es","options","maintainAspectRatio","title","display","legend","scales","xAxes","type","maxBarThickness","gridLines","realtime","duration","delay","refresh","onRefresh","chart","forEach","dataset","index","x","Date","now","y","length","yAxes","scaleLabel","labelString","ticks","max","min","stepSize","tooltips","enabled","mode","intersect","React","Component","App","src_RealTimeChart","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6SAmCMA,EAAW,WACf,MAAO,CACLA,SAAU,CAACC,OAAAC,EAAA,EAAAD,CAAA,IAVOE,EAYE,cAZKC,EAYU,UAZC,CACtCD,QACAE,MAAM,EACNC,uBAAwB,WACxBC,gBAAiBH,EACjBI,YAAaJ,IAKD,CAGNK,KAAM,OAbO,IAACN,EAAOC,GAsFdM,cAlEb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAX,OAAAY,EAAA,EAAAZ,CAAAa,KAAAJ,IACjBE,EAAAX,OAAAc,EAAA,EAAAd,CAAAa,KAAAb,OAAAe,EAAA,EAAAf,CAAAS,GAAAO,KAAAH,KAAMH,KACDO,OAASC,UAAgB,CAC5BC,KAAM,YACNC,KAAM,KACNC,QAAQ,IAEVV,EAAKM,OAAOK,UAAU,CACpBC,IAAK,mCACLC,QAAS,WAEXb,EAAKc,QAAU,GAXEd,mFAcC,IAAAe,EAAAb,KAClBA,KAAKI,OAAOU,GAAG,UAAW,SAAAC,GACxBF,EAAKD,QAAQI,KAAKC,SAASF,EAAIG,aAC/BC,QAAQC,IAAIL,EAAIG,+CAKX,IAAAG,EAAArB,KACP,OACEsB,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACE9B,KAAMT,IACNwC,QAAS,CACPC,qBAAqB,EACrBC,MAAO,CACLC,SAAS,GAEXC,OAAQ,CACND,SAAS,GAEXE,OAAQ,CACNC,MAAO,CACL,CACEC,KAAM,WACNC,gBAAiB,EACjBC,UAAW,CACTN,SAAS,GAEXO,SAAU,CACRC,SAAU,IACVC,MAAO,IACPC,QAAS,IACTC,UAAW,SAAAC,GACTA,EAAM9C,KAAKT,SAASwD,QAAQ,SAACC,EAASC,GACpCD,EAAQhD,KAAKqB,KAAK,CAChB6B,EAAGC,KAAKC,MACRC,EAAG3B,EAAKT,QAAQS,EAAKT,QAAQqC,OA5FhC,WAmGTC,MAjGc,CACxB,CACEC,WAAY,CACVtB,SAAS,EACTuB,YAAa,MAEfC,MAAO,CACLC,IAAK,GACLC,IAAK,EACLC,SAAU,MA0FNC,SArFoB,CAC5BC,SAAS,EACTC,KAAM,UACNC,WAAW,aAsBeC,IAAMC,WCpCnBC,MANf,WACE,OACEzC,EAAAC,EAAAC,cAACwC,EAAD,OCMgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOjD,EAAAC,EAAAC,cAACgD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.6c1e607f.chunk.js","sourcesContent":["import React from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport \"chartjs-plugin-streaming\";\nimport * as emitter from \"emitter-io\";\n\nconst indexPadding = 1;\n\nconst yAxesConfig = () => [\n  {\n    scaleLabel: {\n      display: true,\n      labelString: \"mv\"\n    },\n    ticks: {\n      max: 42,\n      min: 1,\n      stepSize: 1 \n    }\n  }\n];\n\nconst tooltipsConfig = () => ({\n  enabled: false,\n  mode: \"nearest\",\n  intersect: false\n});\n\nconst sensorConfig = (label, color) => ({\n  label,\n  fill: false,\n  cubicInterpolationMode: \"monotone\",\n  backgroundColor: color,\n  borderColor: color\n});\n\nconst datasets = () => {\n  return {\n    datasets: [\n      {\n        ...sensorConfig(\"random data\", \"#00004d\"),\n        data: []\n      }\n    ]\n  };\n};\n\nclass RealTimeChart extends React.Component {\n  constructor(props) {\n    super(props);\n    this.client = emitter.connect({\n      host: \"127.0.0.1\",\n      port: 8080,\n      secure: false\n    });\n    this.client.subscribe({\n      key: \"NV0RKrY3_qOcLTRnDMyOZ5cGU1vNYEjC\",\n      channel: \"chart/\"\n    });\n    this.sensor1 = [];\n  }\n\n  componentDidMount() {\n    this.client.on(\"message\", msg => {\n      this.sensor1.push(parseInt(msg.asString()))\n      console.log(msg.asString())\n    });\n\n  }\n\n  render() {\n    return (\n      <Line\n        data={datasets()}\n        options={{\n          maintainAspectRatio: false,\n          title: {\n            display: false\n          },\n          legend: {\n            display: true\n          },\n          scales: {\n            xAxes: [\n              {\n                type: \"realtime\",\n                maxBarThickness: 3,\n                gridLines: {\n                  display: true\n                },\n                realtime: {\n                  duration: 20000,\n                  delay: 1000,\n                  refresh: 500,\n                  onRefresh: chart => {\n                    chart.data.datasets.forEach((dataset, index) => {\n                      dataset.data.push({\n                        x: Date.now(),\n                        y: this.sensor1[this.sensor1.length - indexPadding]\n                      });\n                    });\n                  }\n                }\n              }\n            ],\n            yAxes: yAxesConfig()\n          },\n          tooltips: tooltipsConfig()\n        }}\n      />\n    );\n  }\n}\n\nexport default RealTimeChart;\n","import React from 'react';\nimport './App.css';\nimport RealTimeChart from './RealTimeChart';\n\nfunction App() {\n  return (\n    <RealTimeChart />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}